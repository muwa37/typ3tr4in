{"version":3,"file":"780.6b739b8483c2cd30c537.js","mappings":"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","sources":["webpack://typ3tr4in/./src/components/ui/CustomButton.tsx","webpack://typ3tr4in/./src/components/ui/PageTitle.tsx","webpack://typ3tr4in/./src/store/mode/selectors.ts","webpack://typ3tr4in/./src/hooks/useCountdown.ts","webpack://typ3tr4in/./src/store/text/selectors.ts","webpack://typ3tr4in/./src/hooks/useWords.ts","webpack://typ3tr4in/./src/hooks/useEngine.ts","webpack://typ3tr4in/./src/hooks/useTypings.ts","webpack://typ3tr4in/./src/components/trainer/Menu.tsx","webpack://typ3tr4in/./src/components/trainer/StatsModal.tsx","webpack://typ3tr4in/./src/components/trainer/Caret.tsx","webpack://typ3tr4in/./src/components/trainer/Character.tsx","webpack://typ3tr4in/./src/components/trainer/UserTypings.tsx","webpack://typ3tr4in/./src/components/trainer/Words.tsx","webpack://typ3tr4in/./src/components/trainer/WordsContainer.tsx","webpack://typ3tr4in/./src/components/trainer/Trainer.tsx","webpack://typ3tr4in/./src/pages/Home.tsx","webpack://typ3tr4in/./src/store/stat/selectors.ts","webpack://typ3tr4in/./src/utils/consts.ts","webpack://typ3tr4in/./src/utils/helpers.ts"],"sourcesContent":["type CustomButtonProps = {\n  onClickFn: () => void;\n  buttonText: string;\n  isActive?: boolean;\n};\n\nconst CustomButton = ({\n  onClickFn,\n  buttonText,\n  isActive,\n}: CustomButtonProps) => {\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onClickFn();\n    e.currentTarget.blur();\n  };\n\n  return (\n    <button\n      className={`m-3 p-3 border-2 rounded-md   hover:border-blue-300 hover:text-blue-300 flex items-center justify-center italic ${\n        isActive\n          ? 'border-lime-700 text-lime-700'\n          : 'border-red-300 text-red-300'\n      }`}\n      onClick={handleClick}\n    >\n      {buttonText}\n    </button>\n  );\n};\n\nexport default CustomButton;\n","type PageTitleProps = { pageTitle: string };\n\nconst PageTitle = ({ pageTitle }: PageTitleProps) => {\n  return (\n    <h1 className='mt-4 text-3xl md:text-6xl font-extrabold'>{pageTitle}</h1>\n  );\n};\n\nexport default PageTitle;\n","import { RootState } from '..';\n\nexport const selectTime = (state: RootState) => state.mode.timeMode;\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nconst useCountdown = (seconds: number) => {\n  const [timeLeft, setTimeLeft] = useState(seconds);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const isRunning = intervalRef.current != null;\n\n  const startCountdown = useCallback(() => {\n    if (!isRunning) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          if (prevTimeLeft <= 1) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n            return 0;\n          }\n          return prevTimeLeft - 1;\n        });\n      }, 1000);\n    }\n  }, [isRunning]);\n\n  const resetCountdown = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = null;\n    setTimeLeft(seconds);\n  }, [seconds]);\n\n  useEffect(() => {\n    if (timeLeft <= 0 && intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, [timeLeft]);\n\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    setTimeLeft(seconds);\n  }, [seconds]);\n\n  return { timeLeft, startCountdown, resetCountdown };\n};\n\nexport default useCountdown;\n","import { RootState } from '..';\n\nexport const selectText = (state: RootState) => state.text;\n","import { selectText } from '@/store/text/selectors';\nimport { setText } from '@/store/text/slice';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst useWords = () => {\n  const dispatch = useDispatch();\n  const generatedText = useSelector(selectText);\n\n  const [words, setWords] = useState<string>(generatedText.text);\n\n  useEffect(() => {\n    setWords(generatedText.text);\n  }, [generatedText.text]);\n\n  const updateWords = useCallback(() => {\n    dispatch(setText());\n  }, [dispatch]);\n\n  return { words, updateWords };\n};\n\nexport default useWords;\n","import { selectTime } from '@/store/mode/selectors';\nimport { modifyStats } from '@/store/stat/slice';\nimport { TrainerState } from '@/types/common';\nimport { calculateAccuracy, calculateWPM, countErrors } from '@/utils/helpers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useCountdown from './useCountdown';\nimport useTypings from './useTypings';\nimport useWords from './useWords';\n\nconst useEngine = () => {\n  const dispatch = useDispatch();\n  const selectedTimeMode = useSelector(selectTime);\n\n  const [trainerState, setTrainerState] = useState<TrainerState>('start');\n  const [errors, setErrors] = useState<number>(0);\n\n  const { words, updateWords } = useWords();\n  const { timeLeft, startCountdown, resetCountdown } =\n    useCountdown(selectedTimeMode);\n  const { typed, cursor, clearTyped, resetTotalTyped, totalTyped } = useTypings(\n    trainerState !== 'end'\n  );\n\n  const isStarting = trainerState === 'start' && cursor > 0;\n  const isWordsFinished = cursor === words.length;\n\n  const reset = useCallback(() => {\n    resetCountdown();\n    resetTotalTyped();\n    setTrainerState('start');\n    setErrors(0);\n    clearTyped();\n    updateWords();\n  }, [resetCountdown, resetTotalTyped, clearTyped, updateWords]);\n\n  const sumErrors = useCallback(() => {\n    const wordsReached = words.substring(0, Math.min(cursor, words.length));\n    const newErrors = countErrors(typed, wordsReached);\n    setErrors(prevErrors => prevErrors + newErrors);\n    return newErrors;\n  }, [typed, words, cursor]);\n\n  useEffect(() => {\n    if (isStarting) {\n      setTrainerState('run');\n      startCountdown();\n    }\n  }, [isStarting, startCountdown]);\n\n  useEffect(() => {\n    if (timeLeft <= 0 && trainerState === 'run') {\n      setTrainerState('end');\n\n      const newErrors = sumErrors();\n      const currentErrors = errors + newErrors;\n\n      dispatch(\n        modifyStats({\n          WPM: calculateWPM(selectedTimeMode, totalTyped),\n          accuracy: calculateAccuracy(currentErrors, totalTyped),\n        })\n      );\n    }\n  }, [timeLeft, trainerState, sumErrors]);\n\n  useEffect(() => {\n    if (isWordsFinished) {\n      sumErrors();\n      updateWords();\n      clearTyped();\n    }\n  }, [clearTyped, isWordsFinished, updateWords, sumErrors]);\n\n  return { trainerState, words, typed, errors, reset, timeLeft, totalTyped };\n};\n\nexport default useEngine;\n","import { isKeyboardCodeAllowed } from '@/utils/helpers';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nconst useTypings = (enabled: boolean) => {\n  const [cursor, setCursor] = useState(0);\n  const [typed, setTyped] = useState<string>('');\n  const totalTyped = useRef(0);\n\n  const keydownHandler = useCallback(\n    ({ key, code }: KeyboardEvent) => {\n      if (!enabled || !isKeyboardCodeAllowed(code)) {\n        return;\n      }\n\n      switch (code) {\n        case 'Backspace':\n          setTyped(prev => prev.slice(0, -1));\n          setCursor(cursor => Math.max(cursor - 1, 0));\n          totalTyped.current = Math.max(totalTyped.current - 1, 0);\n          break;\n        case 'Space':\n          setTyped(prev => prev.concat(' '));\n          setCursor(cursor => cursor + 1);\n          totalTyped.current += 1;\n          break;\n        default:\n          setTyped(prev => prev.concat(key));\n          setCursor(cursor => cursor + 1);\n          totalTyped.current += 1;\n      }\n    },\n    [enabled]\n  );\n\n  const clearTyped = useCallback(() => {\n    setTyped('');\n    setCursor(0);\n  }, []);\n\n  const resetTotalTyped = useCallback(() => {\n    totalTyped.current = 0;\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', keydownHandler);\n\n    return () => {\n      window.removeEventListener('keydown', keydownHandler);\n    };\n  }, [keydownHandler]);\n\n  return {\n    typed,\n    cursor,\n    clearTyped,\n    resetTotalTyped,\n    totalTyped: totalTyped.current,\n  };\n};\n\nexport default useTypings;\n","import { TimeMode, TrainerState } from '@/types/common';\nimport { timeMods } from '@/utils/consts';\nimport CustomButton from '../ui/CustomButton';\n\ntype MenuProps = {\n  trainerState: TrainerState;\n  timeLeft: number;\n  onSelectTimeModeClick: (timeMode: TimeMode) => void;\n  selectedTimeMode: TimeMode;\n  onGenerateNewTextClick: () => void;\n};\n\nconst Menu = ({\n  trainerState,\n  timeLeft,\n  onSelectTimeModeClick,\n  selectedTimeMode,\n  onGenerateNewTextClick,\n}: MenuProps) => {\n  return (\n    <div className='w-full flex flex-col md:flex-row h-full md:h-1/2 items-center justify-evenly lg:justify-between py-2'>\n      <div className='flex items-center justify-start'>\n        <h2 className='hidden md:block px-2 italic text-red-300]'>\n          select time mode:\n        </h2>\n        <ul className='flex'>\n          {timeMods.map(timeMode => (\n            <li key={timeMode}>\n              <CustomButton\n                onClickFn={() => onSelectTimeModeClick(timeMode)}\n                buttonText={timeMode.toString()}\n                isActive={timeMode === selectedTimeMode}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className='flex items-center w-1/2 md:w-1/4 justify-between'>\n        <p\n          className={`border-2 size-12 rounded-full flex items-center justify-center italic ${\n            trainerState === 'run'\n              ? ' border-violet-300 text-violet-300'\n              : 'border-red-300 text-red-300'\n          }`}\n        >\n          {timeLeft}\n        </p>\n\n        <CustomButton\n          onClickFn={onGenerateNewTextClick}\n          buttonText='new text'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import { selectLastAttemptStats } from '@/store/stat/selectors';\nimport { formatPercentage } from '@/utils/helpers';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport CustomButton from '../ui/CustomButton';\n\ntype StatsModalProps = {\n  isActive: boolean;\n  onModalCloseClick: () => void;\n};\n\nconst Modal = ({ isActive, onModalCloseClick }: StatsModalProps) => {\n  const lastAttemptStats = useSelector(selectLastAttemptStats);\n  const navigate = useNavigate();\n\n  const handleCheckoutAllStatsClick = () => {\n    navigate('/stats');\n  };\n\n  return (\n    <div\n      className={\n        isActive\n          ? 'absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-5/6 w-3/4 border-2 p-3 rounded-xl bg-stone-700 border-red-300'\n          : 'hidden'\n      }\n    >\n      <div className='absolute top-4 right-4'>\n        <CustomButton buttonText='close' onClickFn={onModalCloseClick} />\n      </div>\n      <div className='p-2 h-full w-full flex flex-col items-center justify-evenly'>\n        <div className='h-2/3 flex flex-col items-center justify-evenly'>\n          <h2 className='text-3xl font-bold'>Your attempt statistic!</h2>\n          <h3 className='text-blue-300 text-2xl fort-semibold italic'>\n            WPM:{lastAttemptStats.WPM}\n          </h3>\n          <h3 className='text-blue-300 text-2xl fort-semibold italic'>\n            Accuracy:{formatPercentage(lastAttemptStats.accuracy)}\n          </h3>\n        </div>\n        <CustomButton\n          buttonText='checkout all stats'\n          onClickFn={handleCheckoutAllStatsClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","const Caret = () => {\n  return <div className='animate-ping inline-block bg-slate-400 w-1 h-5' />;\n};\n\nexport default Caret;\n","const Character = ({\n  actual,\n  expected,\n}: {\n  actual: string;\n  expected: string;\n}) => {\n  const isCorrect = actual === expected;\n  const isWhiteSpace = expected === ' ';\n\n  return (\n    <span\n      className={`${!isCorrect && !isWhiteSpace && 'text-red-500'} \n        ${isCorrect && !isWhiteSpace && 'text-lime-700'} \n       `}\n    >\n      {expected}\n    </span>\n  );\n};\n\nexport default Character;\n","import Caret from './Caret';\nimport Character from './Character';\n\ntype UserTypingsProps = {\n  userInput: string;\n  words: string;\n  className?: string;\n};\n\nconst UserTypings = ({\n  userInput,\n  words,\n  className = '',\n}: UserTypingsProps) => {\n  const typedCharacters = userInput.split('');\n\n  const renderedCharacters = typedCharacters.map((char, index) => (\n    <Character\n      key={`${char}_${index}`}\n      actual={char}\n      expected={words[index] || ''}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      {renderedCharacters}\n      <Caret />\n    </div>\n  );\n};\n\nexport default UserTypings;\n","import React from 'react';\n\ntype WordsProps = { trainerText: string };\n\nconst Words = React.memo(({ trainerText }: WordsProps) => {\n  return <p className='h-[300px] flex flex-wrap'>{trainerText}</p>;\n});\n\nexport default Words;\n","const WordsContainer = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className='text-xl m-3 md:text-3xl relative leading-relaxed break-all md:m-0 md:mt-3 font-mono'>\n      {children}\n    </div>\n  );\n};\n\nexport default WordsContainer;\n","import useEngine from '@/hooks/useEngine';\nimport { selectTime } from '@/store/mode/selectors';\nimport { setTimeMode } from '@/store/mode/slice';\nimport { TimeMode } from '@/types/common';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from './Menu';\nimport StatsModal from './StatsModal';\nimport UserTypings from './UserTypings';\nimport Words from './Words';\nimport WordsContainer from './WordsContainer';\n\nconst Trainer = () => {\n  const dispatch = useDispatch();\n  const selectedTimeMode = useSelector(selectTime);\n\n  const [isStatsModalActive, setIsStatsModalActive] = useState<boolean>(false);\n\n  const { trainerState, words, typed, timeLeft, reset } = useEngine();\n\n  const onSelectTimeModeClick = useCallback(\n    (timeMode: TimeMode) => {\n      if (timeMode !== selectedTimeMode) {\n        dispatch(setTimeMode(timeMode));\n        reset();\n      }\n    },\n    [dispatch, selectedTimeMode, reset]\n  );\n\n  const onGenerateNewTextClick = useCallback(() => {\n    reset();\n  }, [reset]);\n\n  const onStatsModalCloseClick = useCallback(() => {\n    setIsStatsModalActive(false);\n    reset();\n  }, [reset]);\n\n  useEffect(() => {\n    if (trainerState === 'end') {\n      setIsStatsModalActive(true);\n    }\n  }, [trainerState]);\n\n  return (\n    <section className='h-full flex flex-col justify-center items-center'>\n      <div\n        className={\n          isStatsModalActive\n            ? 'bg-black bg-opacity-50 fixed h-screen w-screen top-0 left-0'\n            : 'hidden'\n        }\n      ></div>\n\n      <StatsModal\n        isActive={isStatsModalActive}\n        onModalCloseClick={onStatsModalCloseClick}\n      />\n\n      {!isStatsModalActive && (\n        <div className='max-w-[1000px] h-1/2 lg:h-2/3 md:m-auto'>\n          <Menu\n            trainerState={trainerState}\n            timeLeft={timeLeft}\n            onSelectTimeModeClick={onSelectTimeModeClick}\n            onGenerateNewTextClick={onGenerateNewTextClick}\n            selectedTimeMode={selectedTimeMode}\n          />\n          <WordsContainer>\n            <Words trainerText={words} />\n            <UserTypings\n              userInput={typed}\n              words={words}\n              className={'absolute inset-0'}\n            />\n          </WordsContainer>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Trainer;\n","import Trainer from '@/components/trainer/Trainer';\nimport PageTitle from '@/components/ui/PageTitle';\n\nconst Home = () => {\n  return (\n    <section className='flex flex-col w-full md:h-1/2 items-center justify-evenly'>\n      <PageTitle pageTitle='Typing Trainer' />\n      <Trainer />\n    </section>\n  );\n};\n\nexport default Home;\n","import { RootState } from '..';\n\nexport const selectLastAttemptStats = (state: RootState) =>\n  state.stat.lastAttemptStats;\nexport const selectStats = (state: RootState) => state.stat;\n","import { TimeMode } from '@/types/common';\n\nexport const techNames = [\n  'TypeScript',\n  'React',\n  'Redux',\n  'Webpack',\n  'TailWind',\n];\n\nexport const timeMods: Array<TimeMode> = [15, 30, 60, 120];\n","import { TimeMode } from '@/types/common';\n\nexport const isKeyboardCodeAllowed = (code: string) => {\n  return (\n    code.startsWith('Key') ||\n    code.startsWith('Digit') ||\n    code === 'Backspace' ||\n    code === 'Space' ||\n    code === 'Comma' ||\n    code === 'Period' ||\n    code === 'Quote'\n  );\n};\n\nexport const countErrors = (actual: string, expected: string) => {\n  const expectedCharacters = expected.split('');\n\n  return expectedCharacters.reduce((errors, expectedChar, i) => {\n    const actualChar = actual[i];\n    if (actualChar !== expectedChar) {\n      errors++;\n    }\n    return errors;\n  }, 0);\n};\n\nexport const calculateAccuracy = (errors: number, total: number) => {\n  if (total > 0) {\n    const corrects = total - errors;\n    return (corrects / total) * 100;\n  }\n\n  return 0;\n};\n\nexport const formatPercentage = (percentage: number) => {\n  return percentage.toFixed(0) + '%';\n};\n\nexport const calculateWPM = (time: TimeMode, total: number) => {\n  if (total > 0) {\n    if (time === 15) {\n      return total * 4;\n    }\n    if (time === 30) {\n      return total * 2;\n    }\n    if (time === 60) {\n      return total;\n    }\n    if (time === 120) {\n      return total * 0.5;\n    }\n  }\n\n  return 0;\n};\n"],"names":["_ref","onClickFn","buttonText","isActive","React","createElement","className","concat","onClick","e","currentTarget","blur","pageTitle","selectTime","state","mode","timeMode","seconds","_useState2","useState","timeLeft","setTimeLeft","intervalRef","useRef","isRunning","current","startCountdown","useCallback","setInterval","prevTimeLeft","clearInterval","resetCountdown","useEffect","selectText","text","dispatch","useDispatch","generatedText","useSelector","words","setWords","updateWords","setText","selectedTimeMode","_slicedToArray","trainerState","setTrainerState","_useState4","errors","setErrors","_useWords","useWords","_useCountdown","useCountdown","_useTypings","enabled","cursor","setCursor","typed","setTyped","totalTyped","keydownHandler","key","code","isKeyboardCodeAllowed","prev","slice","Math","max","clearTyped","resetTotalTyped","window","addEventListener","removeEventListener","useTypings","isStarting","isWordsFinished","length","reset","sumErrors","wordsReached","substring","min","newErrors","countErrors","prevErrors","currentErrors","modifyStats","WPM","calculateWPM","accuracy","calculateAccuracy","onSelectTimeModeClick","onGenerateNewTextClick","timeMods","map","CustomButton","toString","onModalCloseClick","lastAttemptStats","selectLastAttemptStats","navigate","useNavigate","formatPercentage","actual","expected","isCorrect","isWhiteSpace","userInput","_ref$className","renderedCharacters","split","char","index","Character","Caret","trainerText","children","isStatsModalActive","setIsStatsModalActive","_useEngine","useEngine","setTimeMode","onStatsModalCloseClick","StatsModal","Menu","WordsContainer","Words","UserTypings","PageTitle","Trainer","stat","selectStats","techNames","startsWith","reduce","expectedChar","i","total","percentage","toFixed","time"],"sourceRoot":""}